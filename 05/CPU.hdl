// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	// calculate A register input if it is Alu output or Instruction
	Mux16(a = instruction, b = AluOutput, sel = instruction[15], out = ALUorIns);
	
	// calculate A register load and create A register
	Mux(a = true, b = instruction[5], sel = instruction[15], out = loadA);
	ARegister(in = ALUorIns, load = loadA, out = Aout, out[0..14] = addressM);
	
	// calculate D register load and create D register
	And(a = instruction[15], b = instruction[4], out = loadD);
	DRegister(in = AluOutput, load = loadD, out = Dout);
	
	// calculate ALU input if it is A or M 
	Mux16(a = Aout, b = inM, sel = instruction[12], out = AorM);
	
	// Alu calculations
	ALU(x = Dout, y = AorM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8],
			f = instruction[7], no = instruction[6],  zr = aluzr, ng = alung,out = AluOutput, out = outM);
	
	
	// decide writeM
	And(a = instruction[15], b = instruction[3], out = writeM);
	
	// PC handling
	
	And(a=alung,b=instruction[2],out=isneg); // is the alu output negative, is j1 matches isneg
	And(a=aluzr,b=instruction[1],out=isZero); // is the alu output zero, is j2 matches isZero
	Not(in=alung,out=notng);
	Not(in=aluzr,out=notZero);
	And(a=notng,b=notZero,out=pos); // is the alu output positive
	And(a=instruction[0],b = pos,out=ispos); // is j3 matches ispos
	
	// check if (isZero or isneg or ispos) = true
	Or(a= isZero,b= ispos,out= iszeropos);
	Or(a= isneg,b= iszeropos,out= issomthing);
	
	// check if the instruction is c instruction 
	And(a = issomthing, b = instruction[15], out = loadPC);
	
	// update PC 
	PC(in = Aout, load = loadPC, inc = true, reset = reset, out[0..14] = pc);
	
	
	
	
}