// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static Array heap;


    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048; // heapbase
		let heap[0] = 0; // next
		let heap[1] = 14335; // length
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }
	
	

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int curBlockPtr, nextBlockPtr, newBlockPtr;
		
		let curBlockPtr = heap;
		
		// find next available place with the required size
		while(~(ram[curBlockPtr +1] > (size+2))){
			if (curBlockPtr = 0){
				return 0;
			}
			let nextBlockPtr = ram[curBlockPtr];
			let curBlockPtr = nextBlockPtr;
		}
		
		// alloc place from the end of the heap
		let newBlockPtr = curBlockPtr + ram[curBlockPtr+1]-size;  
		
		// define length of the current block 
		let ram[newBlockPtr+1] = size;
		
		// define length of the next avaiable chunck
		let ram[curBlockPtr + 1] = ram[curBlockPtr+1]-size-2;
		return newBlockPtr;
			
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int temp;
		let temp = ram[2048];
		let ram[2048] = o-2;
		let ram[o-2] = temp;
		return;
		
    }    
}
