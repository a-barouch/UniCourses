// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screen;
	static boolean curColor;
	static Array twoPowers;

    /** Initializes the Screen. */
    function void init() {
		var int i, curVal;
		let screen = 16384;
		let curColor = true;
		
		let i = 0;
		let curVal = 1;
		let twoPowers = Array.new(16);
		while (i <16){
			let twoPowers[i] = curVal;
			let curVal = curVal+curVal;
			let i = i +1;
		}
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 16384;
		while (i < 24575){
			do Memory.poke(i,false);	
			let i = i+1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let curColor = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, val;
		var int ithBitInVal;
		
		let address = ((32*y) + (x/16));
		let ithBitInVal=twoPowers[x&15];
		if (curColor){
			let val = screen[address]|ithBitInVal;
		}
		else{
			let val = screen[address] & ~ithBitInVal;
		}
		let screen[address] = val;
		return;
		
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a,b,diff, dx, dy, temp;
		let a = 0;
		let b = 0;
		let diff = 0;
		let dx = x2-x1;
		let dy = y2-y1;
		
		if(x1=x2)
		{
			do Screen.drawVerticalLine(y1,y2,x1);
			return;
		}
		if (y1 = y2)
		{
			do Screen.drawHorizontalLine(x1,x2,y1);
			return;
		}
		
		if ((dx < 0)& (dy <0)){ // we want to switch the two points 
			let temp = x1;
			let x1 =  x2;
			let x2 = temp;
			
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
			
			let dx = -dx;
			let dy = -dy;
		}
		if ((dx > 0)& (dy > 0)){
			while (~(a>dx)&~(b>dy)){
				do Screen.drawPixel(x1+a, y1+b);
				if (diff < 0){
					let a = a + 1;
					let diff = diff + dy;
				}
				else{
					let b = b+1;
					let diff = diff - dx;
				}
			}
			return;
		}
		
		else {
			if ((dx > 0)& (dy < 0)){
				let temp = x1;
				let x1 =  x2;
				let x2 = temp;
			
				let temp = y1;
				let y1 = y2;
				let y2 = temp;
				
				let dy = -dy;
			}
			else{
				let dx = -dx;
			}
			while (~(a>dx)&~(b>dy)){
				do Screen.drawPixel(x1-a, y1+b);
				if (diff < 0){
					let a = a + 1;
					let diff = diff + dy;
				}
				else{
					let b = b+1;
					let diff = diff - dx;
				}
			}
			return;
		
		}
    }
	
	
	function void drawHorizontalLine(int x1, int x2, int y){
		var int a,temp;
		let a = 0;
		if (x1>x2){
			let temp = x1;
			let x1 =  x2;
			let x2 = temp;
		}
		while (x1+a < x2){
			do Screen.drawPixel(x1+a,y);
			let a = a +1;
		}
		return;
	}
	
	
	function void drawVerticalLine(int y1, int y2, int x){
		var int b,temp;
		let b = 0;
		if (y1>y2){
			let temp = y1;
			let y1 =  y2;
			let y2 = temp;
		}
		while (y1+b < y2){
			do Screen.drawPixel(x,y1+b);
			let b = b +1;
		}
		return;
	}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a;
        let a = 0;
        while ((a+x1) < (x2+1)) {
            do Screen.drawVerticalLine( y1, y2, x1 + a);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy;
		if (r > 181){
			return;
		}
		let dy = -r;
		while ( ~(dy > r)){
			do Screen.drawLine(x-Math.sqrt((r*r) -(dy*dy)), y + dy, x + Math.sqrt((r*r) -(dy*dy)), y + dy);
			let dy = dy +1;
		}
		return;
		
    }
}
