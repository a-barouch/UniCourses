/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
    PARTS:
	ShiftRight(in = x, out = srX);
	ShiftRight(in = y, out = srY);
	ShiftLeft(in = x, out = slX);
	ShiftLeft(in = y, out = slY);
	Mux16(a = srX, b = slX, sel = instruction[5], out = xShifted);
	Mux16(a = srY, b = slY, sel = instruction[5], out = yShifted);
	Mux16(a=yShifted, b=xShifted, sel = instruction[4], out = shiftRes);
	  
	// calculates according to regular alu  
	ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], zy = instruction[3], ny = instruction[2],
					f = instruction[1], no = instruction[0], out = ALUres, zr = zrALU, ng = ngALU);
	
	// calculates x*y
	Mul(a = x, b = y, out = mulRes);
	
	// decide which result to take
	Mux4Way16(a=mulRes, b = shiftRes, c = mulRes, d = ALUres, sel = instruction[7..8],out = out, out[0..7]= half1, out[15] = out15);
		
	// returns zr value, checks if out is 0
	Or8Way(in = half1, out = notzr);
	Not(in = notzr, out = zr);
	
	// returns ng value, checks if out is negative
	Not(in = out15, out = notng);
	Not(in = notng, out = ng);
		
}
